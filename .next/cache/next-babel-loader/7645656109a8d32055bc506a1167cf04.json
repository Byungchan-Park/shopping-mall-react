{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jspar\\\\Desktop\\\\shopping-list-functionality\\\\pages\\\\list.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport Header from \"../components/layout/header\";\nimport Footer from \"../components/layout/footer\";\nimport Input from \"../components/form/input\";\nimport Button from \"../components/form/button\";\nimport Card from \"../components/card/product\";\nimport Confirm from \"../components/modal/confirm\";\n\nconst ProductListPage = () => {\n  const {\n    0: productList,\n    1: setProductList\n  } = useState([{\n    idx: 1,\n    name: \"새우깡\",\n    price: \"1500\"\n  }, {\n    idx: 2,\n    name: \"고구마깡\",\n    price: \"2000\"\n  }, {\n    idx: 3,\n    name: \"감자깡\",\n    price: \"1800\"\n  }, {\n    idx: 4,\n    name: \"다이제스티\",\n    price: \"10000\"\n  }, {\n    idx: 5,\n    name: \"초코파이\",\n    price: \"5000\"\n  }]);\n  const {\n    0: searchVal,\n    1: setSearchVal\n  } = useState(\"\");\n  const {\n    0: createProductInfo,\n    1: setCreateProductInfo\n  } = useState({\n    name: \"\",\n    price: \"\"\n  });\n  const {\n    0: selectedCard,\n    1: setSelectedCard\n  } = useState();\n  const {\n    0: showConfirm,\n    1: setShowConfirm\n  } = useState(false);\n  const {\n    0: mainText,\n    1: setMainText\n  } = useState(\"\");\n  const {\n    0: subText,\n    1: setSubText\n  } = useState(\"\");\n  const {\n    0: isBtnSelected,\n    1: setIsBtnSelected\n  } = useState(false);\n  const {\n    0: btnMethods,\n    1: setBtnMethods\n  } = useState([{\n    btnName: \"create\",\n    isBtnSelected: false,\n    confirmFunction: function () {\n      onCreate();\n    }\n  }, {\n    btnName: \"revise\",\n    isBtnSelected: false,\n    confirmFunction: function () {\n      onRevise();\n    }\n  }, {\n    btnName: \"delete\",\n    isBtnSelected: false,\n    confirmFunction: function () {\n      onDelete();\n    }\n  }]);\n\n  const handleShowConfirm = (main, sub, btnName) => {\n    setMainText(main);\n    setSubText(sub);\n    console.log(btnName);\n    setBtnMethods(btnMethods.map(item => {\n      item.btnName === btnName ? _objectSpread(_objectSpread({}, item), {}, {\n        isBtnSelected: true\n      }) : item;\n    })); // 클릭한 버튼만 true로 바뀐다.\n  }; // 취소 버튼 누르면,\n\n\n  const handleCloseBtn = () => {\n    setMainText(\"\");\n    setSubText(\"\"); // text들 초기화\n\n    setSelectedCard(); // 선택한 카드 state 초기화\n\n    setShowConfirm(false);\n  }; // 확인 버튼 누르면,\n\n\n  const handleConfirmBtn = () => {\n    btnMethods.forEach(btnMethod => {\n      if (!isBtnSelected) {\n        return;\n      }\n\n      btnMethod.confirmFunction();\n    });\n  }; // Search input의 value를 저장해둠.\n\n\n  const handleSearchInput = (name, value) => {\n    setSearchVal(value); // searchVal 하고 productList 안에 있는 item.name을 비교\n    // filter method 활용\n    // 검색한 문자열이 존재하는지 하지 않는지 true로 반환값이 나올 수 있도록(String.prototype.includes() 활용)\n\n    /* setProductList(\r\n      productList.filter((item, index) => item.name.includes(value))\r\n    ); */\n    // 이렇게 구현하면 문제가 있음. render의 body 부분에서 productList에 filter를 적용.\n    // array.filter((item, index) => item.indexOf('특정스트링') === index)\n  };\n\n  const nextId = useRef(6);\n\n  const handleChangeInput = (name, value) => {\n    setCreateProductInfo(_objectSpread(_objectSpread({}, createProductInfo), {}, {\n      [name]: value\n    }));\n  };\n  /* name, price 에 입력 후 등록 기능 */\n\n\n  const onCreate = () => {\n    const newProduct = {\n      idx: nextId.current,\n      name: createProductInfo.name,\n      price: createProductInfo.price\n    };\n    setProductList(productList.concat(newProduct));\n    nextId.current += 1; // 등록 후 input 창들 초기화\n\n    setCreateProductInfo({\n      name: \"\",\n      price: \"\"\n    });\n  }; // 카드 선택\n\n\n  const handleIsClicked = idx => {\n    alert(\"선택되었습니다.\");\n    setSelectedCard(idx);\n  };\n  /* 카드를 클릭하고 클릭한 카드의 보더가 바뀌고 상품명, 가격 창에 수정할 사항 입력 후 다시 수정 버튼 누르면 수정이 된다. */\n\n\n  const onRevise = () => {\n    setProductList(productList.map(item => {\n      item.idx === selectedCard ? _objectSpread(_objectSpread({}, item), {}, {\n        name: createProductInfo.name,\n        price: createProductInfo.price\n      }) : item;\n    })); // productList를 그대로 가져와서, idx = 5인 item에 대해서 name만 변경한다.\n    // 그게 아닐 경우는 그대로 둔다.\n  };\n  /* 내가 클릭한 카드를 삭제하는 로직을 짜야 한다. */\n\n\n  const onDelete = () => {\n    setProductList(productList.filter(item => item.idx !== selectedCard)); // idx의 값은 number이므로 문자열이 아님.\n\n    setTimeout(() => {\n      setShowConfirm(false);\n    }, 1000);\n  };\n\n  useEffect(() => {\n    if (mainText) {\n      setShowConfirm(true);\n    }\n  }, [mainText, subText]);\n  return __jsx(React.Fragment, null, __jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"list-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"con-head\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    label: \"\\uAC80\\uC0C9\",\n    type: \"text\",\n    name: \"search\",\n    changeCB: handleSearchInput,\n    value: searchVal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }\n  }), __jsx(Input, {\n    className: \"product-name-input-group\",\n    label: \"\\uC0C1\\uD488\\uBA85\",\n    type: \"text\",\n    name: \"name\",\n    changeCB: handleChangeInput,\n    value: createProductInfo.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }), __jsx(Input, {\n    label: \"\\uAC00\\uACA9\",\n    type: \"text\",\n    name: \"price\",\n    changeCB: handleChangeInput,\n    value: createProductInfo.price,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }\n  }), __jsx(Button, {\n    btnName: \"create\",\n    btnColor: \"btn-black\",\n    clickCB: () => handleShowConfirm(\"등록하시겠습니까?\", \"새로 추가됩니다.\", btnName),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }\n  }, \"\\uB4F1 \\uB85D\"), __jsx(Button, {\n    btnName: \"revise\",\n    btnColor: \"btn-black\",\n    clickCB: () => handleShowConfirm(\"수정하시겠습니까?\", \"선택한 카드가 수정됩니다.\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }\n  }, \"\\uC218 \\uC815\"), __jsx(Button, {\n    btnName: \"delete\",\n    btnColor: \"btn-black\",\n    clickCB: () => handleShowConfirm(\"삭제하시겠습니까?\", \"영구 삭제됩니다.\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }\n  }, \"\\uC0AD \\uC81C\")), __jsx(\"div\", {\n    className: \"con-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    className: \"list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }\n  }, productList.filter(item => item.name.indexOf(searchVal) !== -1).map((item, index) => __jsx(Card, {\n    key: index,\n    id: item.idx,\n    name: item.name,\n    price: item.price,\n    clickCB: () => handleIsClicked(item.idx),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 19\n    }\n  })))))), __jsx(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }\n  }), __jsx(Confirm, {\n    show: showConfirm,\n    mainText: mainText,\n    subText: subText,\n    onCloseCB: handleCloseBtn,\n    onConfirmCB: handleConfirmBtn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default ProductListPage;","map":{"version":3,"sources":["C:/Users/jspar/Desktop/shopping-list-functionality/pages/list.js"],"names":["React","useState","useRef","useEffect","Header","Footer","Input","Button","Card","Confirm","ProductListPage","productList","setProductList","idx","name","price","searchVal","setSearchVal","createProductInfo","setCreateProductInfo","selectedCard","setSelectedCard","showConfirm","setShowConfirm","mainText","setMainText","subText","setSubText","isBtnSelected","setIsBtnSelected","btnMethods","setBtnMethods","btnName","confirmFunction","onCreate","onRevise","onDelete","handleShowConfirm","main","sub","console","log","map","item","handleCloseBtn","handleConfirmBtn","forEach","btnMethod","handleSearchInput","value","nextId","handleChangeInput","newProduct","current","concat","handleIsClicked","alert","filter","setTimeout","indexOf","index"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport Header from \"../components/layout/header\";\r\nimport Footer from \"../components/layout/footer\";\r\nimport Input from \"../components/form/input\";\r\nimport Button from \"../components/form/button\";\r\nimport Card from \"../components/card/product\";\r\nimport Confirm from \"../components/modal/confirm\";\r\n\r\nconst ProductListPage = () => {\r\n  const [productList, setProductList] = useState([\r\n    { idx: 1, name: \"새우깡\", price: \"1500\" },\r\n    { idx: 2, name: \"고구마깡\", price: \"2000\" },\r\n    { idx: 3, name: \"감자깡\", price: \"1800\" },\r\n    { idx: 4, name: \"다이제스티\", price: \"10000\" },\r\n    { idx: 5, name: \"초코파이\", price: \"5000\" },\r\n  ]);\r\n  const [searchVal, setSearchVal] = useState(\"\");\r\n  const [createProductInfo, setCreateProductInfo] = useState({\r\n    name: \"\",\r\n    price: \"\",\r\n  });\r\n  const [selectedCard, setSelectedCard] = useState();\r\n  const [showConfirm, setShowConfirm] = useState(false);\r\n  const [mainText, setMainText] = useState(\"\");\r\n  const [subText, setSubText] = useState(\"\");\r\n  const [isBtnSelected, setIsBtnSelected] = useState(false);\r\n  const [btnMethods, setBtnMethods] = useState([\r\n    {\r\n      btnName: \"create\",\r\n      isBtnSelected: false,\r\n      confirmFunction: function () {\r\n        onCreate();\r\n      },\r\n    },\r\n    {\r\n      btnName: \"revise\",\r\n      isBtnSelected: false,\r\n      confirmFunction: function () {\r\n        onRevise();\r\n      },\r\n    },\r\n    {\r\n      btnName: \"delete\",\r\n      isBtnSelected: false,\r\n      confirmFunction: function () {\r\n        onDelete();\r\n      },\r\n    },\r\n  ]);\r\n\r\n  const handleShowConfirm = (main, sub, btnName) => {\r\n    setMainText(main);\r\n    setSubText(sub);\r\n    console.log(btnName);\r\n    setBtnMethods(\r\n      btnMethods.map((item) => {\r\n        item.btnName === btnName ? { ...item, isBtnSelected: true } : item;\r\n      })\r\n    );\r\n    // 클릭한 버튼만 true로 바뀐다.\r\n  };\r\n\r\n  // 취소 버튼 누르면,\r\n  const handleCloseBtn = () => {\r\n    setMainText(\"\");\r\n    setSubText(\"\");\r\n    // text들 초기화\r\n    setSelectedCard();\r\n    // 선택한 카드 state 초기화\r\n    setShowConfirm(false);\r\n  };\r\n\r\n  // 확인 버튼 누르면,\r\n  const handleConfirmBtn = () => {\r\n    btnMethods.forEach((btnMethod) => {\r\n      if (!isBtnSelected) {\r\n        return;\r\n      }\r\n      btnMethod.confirmFunction();\r\n    });\r\n  };\r\n\r\n  // Search input의 value를 저장해둠.\r\n  const handleSearchInput = (name, value) => {\r\n    setSearchVal(value);\r\n    // searchVal 하고 productList 안에 있는 item.name을 비교\r\n    // filter method 활용\r\n    // 검색한 문자열이 존재하는지 하지 않는지 true로 반환값이 나올 수 있도록(String.prototype.includes() 활용)\r\n    /* setProductList(\r\n      productList.filter((item, index) => item.name.includes(value))\r\n    ); */\r\n    // 이렇게 구현하면 문제가 있음. render의 body 부분에서 productList에 filter를 적용.\r\n\r\n    // array.filter((item, index) => item.indexOf('특정스트링') === index)\r\n  };\r\n\r\n  const nextId = useRef(6);\r\n\r\n  const handleChangeInput = (name, value) => {\r\n    setCreateProductInfo({ ...createProductInfo, [name]: value });\r\n  };\r\n\r\n  /* name, price 에 입력 후 등록 기능 */\r\n  const onCreate = () => {\r\n    const newProduct = {\r\n      idx: nextId.current,\r\n      name: createProductInfo.name,\r\n      price: createProductInfo.price,\r\n    };\r\n    setProductList(productList.concat(newProduct));\r\n    nextId.current += 1;\r\n    // 등록 후 input 창들 초기화\r\n    setCreateProductInfo({ name: \"\", price: \"\" });\r\n  };\r\n\r\n  // 카드 선택\r\n  const handleIsClicked = (idx) => {\r\n    alert(\"선택되었습니다.\");\r\n    setSelectedCard(idx);\r\n  };\r\n\r\n  /* 카드를 클릭하고 클릭한 카드의 보더가 바뀌고 상품명, 가격 창에 수정할 사항 입력 후 다시 수정 버튼 누르면 수정이 된다. */\r\n  const onRevise = () => {\r\n    setProductList(\r\n      productList.map((item) => {\r\n        item.idx === selectedCard\r\n          ? {\r\n              ...item,\r\n              name: createProductInfo.name,\r\n              price: createProductInfo.price,\r\n            }\r\n          : item;\r\n      })\r\n    );\r\n    // productList를 그대로 가져와서, idx = 5인 item에 대해서 name만 변경한다.\r\n    // 그게 아닐 경우는 그대로 둔다.\r\n  };\r\n\r\n  /* 내가 클릭한 카드를 삭제하는 로직을 짜야 한다. */\r\n  const onDelete = () => {\r\n    setProductList(productList.filter((item) => item.idx !== selectedCard));\r\n    // idx의 값은 number이므로 문자열이 아님.\r\n    setTimeout(() => {\r\n      setShowConfirm(false);\r\n    }, 1000);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (mainText) {\r\n      setShowConfirm(true);\r\n    }\r\n  }, [mainText, subText]);\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <div className=\"list-wrapper\">\r\n        <div className=\"container\">\r\n          <div className=\"con-head\">\r\n            <Input\r\n              label=\"검색\"\r\n              type=\"text\"\r\n              name=\"search\"\r\n              changeCB={handleSearchInput}\r\n              value={searchVal}\r\n            />\r\n            <Input\r\n              className=\"product-name-input-group\"\r\n              label=\"상품명\"\r\n              type=\"text\"\r\n              name=\"name\"\r\n              changeCB={handleChangeInput}\r\n              value={createProductInfo.name}\r\n            />\r\n            <Input\r\n              label=\"가격\"\r\n              type=\"text\"\r\n              name=\"price\"\r\n              changeCB={handleChangeInput}\r\n              value={createProductInfo.price}\r\n            />\r\n            <Button\r\n              btnName=\"create\"\r\n              btnColor=\"btn-black\"\r\n              clickCB={() =>\r\n                handleShowConfirm(\r\n                  \"등록하시겠습니까?\",\r\n                  \"새로 추가됩니다.\",\r\n                  btnName\r\n                )\r\n              }\r\n            >\r\n              등 록\r\n            </Button>\r\n            <Button\r\n              btnName=\"revise\"\r\n              btnColor=\"btn-black\"\r\n              clickCB={() =>\r\n                handleShowConfirm(\r\n                  \"수정하시겠습니까?\",\r\n                  \"선택한 카드가 수정됩니다.\"\r\n                )\r\n              }\r\n            >\r\n              수 정\r\n            </Button>\r\n            <Button\r\n              btnName=\"delete\"\r\n              btnColor=\"btn-black\"\r\n              clickCB={() =>\r\n                handleShowConfirm(\"삭제하시겠습니까?\", \"영구 삭제됩니다.\")\r\n              }\r\n            >\r\n              삭 제\r\n            </Button>\r\n          </div>\r\n          <div className=\"con-body\">\r\n            <div className=\"list\">\r\n              {productList\r\n                .filter((item) => item.name.indexOf(searchVal) !== -1)\r\n                .map((item, index) => (\r\n                  <Card\r\n                    key={index}\r\n                    id={item.idx}\r\n                    name={item.name}\r\n                    price={item.price}\r\n                    clickCB={() => handleIsClicked(item.idx)}\r\n                  />\r\n                ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Footer />\r\n      <Confirm\r\n        show={showConfirm}\r\n        mainText={mainText}\r\n        subText={subText}\r\n        onCloseCB={handleCloseBtn}\r\n        onConfirmCB={handleConfirmBtn}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductListPage;\r\n"]},"metadata":{},"sourceType":"module"}