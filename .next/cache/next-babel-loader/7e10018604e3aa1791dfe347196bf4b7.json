{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jspar\\\\Desktop\\\\shopping-list-functionality\\\\pages\\\\list.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Header from \"../components/layout/header\";\nimport Footer from \"../components/layout/footer\";\nimport Input from \"../components/form/input\";\nimport Button from \"../components/form/button\";\nimport Card from \"../components/card/product\";\n\nconst ProductListPage = () => {\n  const {\n    0: productList,\n    1: setProductList\n  } = useState([{\n    idx: 1,\n    name: \"새우깡\",\n    price: \"1500\",\n    isClicked: false\n  }, {\n    idx: 2,\n    name: \"고구마깡\",\n    price: \"2000\",\n    isClicked: false\n  }, {\n    idx: 3,\n    name: \"감자깡\",\n    price: \"1800\",\n    isClicked: false\n  }, {\n    idx: 4,\n    name: \"다이제스티\",\n    price: \"10000\",\n    isClicked: false\n  }, {\n    idx: 5,\n    name: \"초코파이\",\n    price: \"5000\",\n    isClicked: false\n  }]);\n  const {\n    0: searchVal,\n    1: setSearchVal\n  } = useState(\"\");\n  const {\n    0: createProductInfo,\n    1: setCreateProductInfo\n  } = useState({\n    name: \"\",\n    price: \"\"\n  }); // Search input의 value를 저장해둠.\n\n  const handleSearchInput = (name, value) => {\n    setSearchVal(value); // searchVal 하고 productList 안에 있는 item.name을 비교\n    // filter method 활용\n    // 검색한 문자열이 존재하는지 하지 않는지 true로 반환값이 나올 수 있도록(String.prototype.includes() 활용)\n\n    /* setProductList(\r\n      productList.filter((item, index) => item.name.includes(value))\r\n    ); */\n    // 이렇게 구현하면 문제가 있음. render의 body 부분에서 productList에 filter를 적용.\n    // array.filter((item, index) => item.indexOf('특정스트링') === index)\n  };\n\n  const nextId = useRef(6);\n\n  const handleChangeInput = (name, value) => {\n    setCreateProductInfo(_objectSpread(_objectSpread({}, createProductInfo), {}, {\n      [name]: value\n    }));\n  };\n  /* name, price 에 입력 후 등록 기능 */\n\n\n  const onCreate = () => {\n    const newProduct = {\n      idx: nextId.current,\n      name: createProductInfo.name,\n      price: createProductInfo.price\n    };\n    setProductList(productList.concat(newProduct));\n    nextId.current += 1; // 등록 후 input 창들 초기화\n\n    setCreateProductInfo({\n      name: \"\",\n      price: \"\"\n    });\n  }; // 카드 선택\n\n\n  const handleIsClicked = name => {\n    setProductList(productList.map(item => item.name === name ? _objectSpread(_objectSpread({}, item), {}, {\n      isClicked: true\n    }) : item));\n  };\n  /* 카드를 클릭하고 클릭한 카드의 보더가 바뀌고 상품명, 가격 창에 수정할 사항 입력 후 다시 수정 버튼 누르면 수정이 된다. */\n\n\n  const onRevise = () => {\n    setProductList(productList.map(item => {\n      item.idx === \"5\" ? _objectSpread(_objectSpread({}, item), {}, {\n        name: \"오예스\"\n      }) : item;\n    })); // productList를 그대로 가져와서, idx = 5인 item에 대해서 name만 변경한다.\n    // 그게 아닐 경우는 그대로 둔다.\n  };\n  /* 내가 클릭한 카드를 삭제하는 로직을 짜야 한다. */\n\n\n  const onDelete = () => {\n    setProductList(productList.filter(item => item.idx === 5)); // idx의 값은 number이므로 문자열이 아님.\n  }; //\n\n\n  return __jsx(React.Fragment, null, __jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"list-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"con-head\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    label: \"\\uAC80\\uC0C9\",\n    type: \"text\",\n    name: \"search\",\n    changeCB: handleSearchInput,\n    value: searchVal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }), __jsx(Input, {\n    className: \"product-name-input-group\",\n    label: \"\\uC0C1\\uD488\\uBA85\",\n    type: \"text\",\n    name: \"name\",\n    changeCB: handleChangeInput,\n    value: createProductInfo.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }), __jsx(Input, {\n    label: \"\\uAC00\\uACA9\",\n    type: \"text\",\n    name: \"price\",\n    changeCB: handleChangeInput,\n    value: createProductInfo.price,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }), __jsx(Button, {\n    btnColor: \"btn-black\",\n    clickCB: onCreate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, \"\\uB4F1 \\uB85D\"), __jsx(Button, {\n    btnColor: \"btn-black\",\n    clickCB: onRevise,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, \"\\uC218 \\uC815\"), __jsx(Button, {\n    btnColor: \"btn-black\",\n    clickCB: onDelete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, \"\\uC0AD \\uC81C\")), __jsx(\"div\", {\n    className: \"con-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    className: \"list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, productList.filter(item => item.name.includes(searchVal)).map((item, index) => __jsx(Card, {\n    key: index,\n    id: item.idx,\n    name: item.name,\n    price: item.price,\n    handleIsClicked: handleIsClicked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 19\n    }\n  })))))), __jsx(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default ProductListPage;","map":{"version":3,"sources":["C:/Users/jspar/Desktop/shopping-list-functionality/pages/list.js"],"names":["React","useState","useEffect","useRef","Header","Footer","Input","Button","Card","ProductListPage","productList","setProductList","idx","name","price","isClicked","searchVal","setSearchVal","createProductInfo","setCreateProductInfo","handleSearchInput","value","nextId","handleChangeInput","onCreate","newProduct","current","concat","handleIsClicked","map","item","onRevise","onDelete","filter","includes","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport Header from \"../components/layout/header\";\r\nimport Footer from \"../components/layout/footer\";\r\nimport Input from \"../components/form/input\";\r\nimport Button from \"../components/form/button\";\r\nimport Card from \"../components/card/product\";\r\n\r\nconst ProductListPage = () => {\r\n  const [productList, setProductList] = useState([\r\n    { idx: 1, name: \"새우깡\", price: \"1500\", isClicked: false },\r\n    { idx: 2, name: \"고구마깡\", price: \"2000\", isClicked: false },\r\n    { idx: 3, name: \"감자깡\", price: \"1800\", isClicked: false },\r\n    { idx: 4, name: \"다이제스티\", price: \"10000\", isClicked: false },\r\n    { idx: 5, name: \"초코파이\", price: \"5000\", isClicked: false },\r\n  ]);\r\n  const [searchVal, setSearchVal] = useState(\"\");\r\n  const [createProductInfo, setCreateProductInfo] = useState({\r\n    name: \"\",\r\n    price: \"\",\r\n  });\r\n\r\n  // Search input의 value를 저장해둠.\r\n  const handleSearchInput = (name, value) => {\r\n    setSearchVal(value);\r\n    // searchVal 하고 productList 안에 있는 item.name을 비교\r\n    // filter method 활용\r\n    // 검색한 문자열이 존재하는지 하지 않는지 true로 반환값이 나올 수 있도록(String.prototype.includes() 활용)\r\n    /* setProductList(\r\n      productList.filter((item, index) => item.name.includes(value))\r\n    ); */\r\n    // 이렇게 구현하면 문제가 있음. render의 body 부분에서 productList에 filter를 적용.\r\n\r\n    // array.filter((item, index) => item.indexOf('특정스트링') === index)\r\n  };\r\n\r\n  const nextId = useRef(6);\r\n\r\n  const handleChangeInput = (name, value) => {\r\n    setCreateProductInfo({ ...createProductInfo, [name]: value });\r\n  };\r\n\r\n  /* name, price 에 입력 후 등록 기능 */\r\n  const onCreate = () => {\r\n    const newProduct = {\r\n      idx: nextId.current,\r\n      name: createProductInfo.name,\r\n      price: createProductInfo.price,\r\n    };\r\n    setProductList(productList.concat(newProduct));\r\n    nextId.current += 1;\r\n    // 등록 후 input 창들 초기화\r\n    setCreateProductInfo({ name: \"\", price: \"\" });\r\n  };\r\n\r\n  // 카드 선택\r\n  const handleIsClicked = (name) => {\r\n    setProductList(\r\n      productList.map((item) =>\r\n        item.name === name ? { ...item, isClicked: true } : item\r\n      )\r\n    );\r\n  };\r\n\r\n  /* 카드를 클릭하고 클릭한 카드의 보더가 바뀌고 상품명, 가격 창에 수정할 사항 입력 후 다시 수정 버튼 누르면 수정이 된다. */\r\n  const onRevise = () => {\r\n    setProductList(\r\n      productList.map((item) => {\r\n        item.idx === \"5\" ? { ...item, name: \"오예스\" } : item;\r\n      })\r\n    );\r\n    // productList를 그대로 가져와서, idx = 5인 item에 대해서 name만 변경한다.\r\n    // 그게 아닐 경우는 그대로 둔다.\r\n  };\r\n\r\n  /* 내가 클릭한 카드를 삭제하는 로직을 짜야 한다. */\r\n  const onDelete = () => {\r\n    setProductList(productList.filter((item) => item.idx === 5));\r\n    // idx의 값은 number이므로 문자열이 아님.\r\n  };\r\n  //\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <div className=\"list-wrapper\">\r\n        <div className=\"container\">\r\n          <div className=\"con-head\">\r\n            <Input\r\n              label=\"검색\"\r\n              type=\"text\"\r\n              name=\"search\"\r\n              changeCB={handleSearchInput}\r\n              value={searchVal}\r\n            />\r\n            <Input\r\n              className=\"product-name-input-group\"\r\n              label=\"상품명\"\r\n              type=\"text\"\r\n              name=\"name\"\r\n              changeCB={handleChangeInput}\r\n              value={createProductInfo.name}\r\n            />\r\n            <Input\r\n              label=\"가격\"\r\n              type=\"text\"\r\n              name=\"price\"\r\n              changeCB={handleChangeInput}\r\n              value={createProductInfo.price}\r\n            />\r\n            <Button btnColor=\"btn-black\" clickCB={onCreate}>\r\n              등 록\r\n            </Button>\r\n            <Button btnColor=\"btn-black\" clickCB={onRevise}>\r\n              수 정\r\n            </Button>\r\n            <Button btnColor=\"btn-black\" clickCB={onDelete}>\r\n              삭 제\r\n            </Button>\r\n          </div>\r\n          <div className=\"con-body\">\r\n            <div className=\"list\">\r\n              {productList\r\n                .filter((item) => item.name.includes(searchVal))\r\n                .map((item, index) => (\r\n                  <Card\r\n                    key={index}\r\n                    id={item.idx}\r\n                    name={item.name}\r\n                    price={item.price}\r\n                    handleIsClicked={handleIsClicked}\r\n                  />\r\n                ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Footer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductListPage;\r\n"]},"metadata":{},"sourceType":"module"}